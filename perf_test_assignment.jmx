<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Perf_Assignment" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Category Details" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-496496018">
            <stringProp name="326661495">${__P(threads,5)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="138323129">${__P(rampup,5)}</stringProp>
            <stringProp name="1726427159">${__P(duration,60)}</stringProp>
            <stringProp name="138323129">${__P(rampup,5)}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Loader" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">data.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">categoryID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(url,api.tmsandbox.co.nz)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="throughput">${__jexl3(${__P(throughput,10)}*60,)}</stringProp>
          <intProp name="calcMode">2</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_GET_Category_details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET_Category_details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/Categories/${categoryID}/Details.json</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;


log.info(&quot;Thread group name is &quot;+ prev.getThreadName());

def errorMessage=&quot;&quot;;
def expectedResponseCode=&quot;200&quot;;

// extract response code from response
def actualResponseCode=prev.getResponseCode();


// if a successfull reponse is received with status code 200
if(actualResponseCode==expectedResponseCode)
{

	// Assert 1 - response status code	
	log.info(&quot;Received a succesfull response and status code is: &quot;+actualResponseCode);


	// extract responsedata into a json response
	def jsonResponse = new groovy.json.JsonSlurper().parse(prev.getResponseData())


	// extract categoryID and canRelist parameter values from json response
	def categoryID =jsonResponse.CategoryId;
	def canRelist = jsonResponse.CanRelist;
	
	
	// Assert 2 - Parameter Check --&gt; Category ID and Text Check --&gt; &quot;CanRelist&quot;: true
	if (!jsonResponse.keySet().contains(&apos;CategoryId&apos;)) 
	{
		AssertionResult.setFailure(true);
    		AssertionResult.setFailureMessage(&apos;&quot;CategoryId&quot; element was not found&apos;);
	}

	else if(jsonResponse.CanRelist.equals(false))
	{
		AssertionResult.setFailure(true);
    		AssertionResult.setFailureMessage(&apos;&quot;CanRelist&quot; value was not true&apos;);
	}


	// extract name ,path, promotionID and price parameter values from response data
	def name= jsonResponse.Name;
	def path= jsonResponse.Path;
	def promotionID= jsonResponse.Promotions;
	def price =jsonResponse.Price;
	
	
	// create a new file to save data which can be append

	f = new FileOutputStream(&quot;response_data.csv&quot;, true);
	p = new PrintStream(f);


	// print the relevant the values into the file
	if(promotionID.equals(null))
	{
	    log.info(&quot;promotion id is null&quot;);
		p.print(categoryID+&quot;,&quot;+name+ &quot;,&quot;+path+&quot;\n&quot;);
	}
	else {
	    log.info(&quot;promotion id is not null&quot;);
		for( int i=0; i&lt; promotionID.Id.size; i++) 
		{
			p.print(categoryID+&quot;,&quot;+name+ &quot;,&quot;+path+ &quot;,&quot;+promotionID.Id[i]+&quot;,&quot;+promotionID.Price[i]+&quot;\n&quot;);
		}
	}
	
	p.close();
	f.close();

}



else	
{
	errorMessage += &quot;Extected response code: [&quot; + expectedResponseCode+ &quot;] but we got response code [&quot; + actualResponseCode + &quot;]&quot;;
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(errorMessage);
	
}

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
